/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fuzzyapp;

import java.awt.event.KeyEvent;
import java.util.Arrays;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import net.sourceforge.jFuzzyLogic.FIS;
import net.sourceforge.jFuzzyLogic.FunctionBlock;

/**
 *
 * @author Turing
 */
public class MainScreen extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public MainScreen() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bttnExit = new javax.swing.JButton();
        jTabbedPaneInputOutput = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtPrintInputandFuzzyRules = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtPrintOutput = new javax.swing.JTextArea();
        jPanelInputs = new javax.swing.JPanel();
        txtOldPeak = new javax.swing.JTextField();
        txtThalliumScan = new javax.swing.JTextField();
        txtAge = new javax.swing.JTextField();
        txtSex = new javax.swing.JTextField();
        txtChestPainType = new javax.swing.JTextField();
        txtBloodPressure = new javax.swing.JTextField();
        txtCholesterolLevel = new javax.swing.JTextField();
        txtRestingBloodSugar = new javax.swing.JTextField();
        txtMaximumHeartRate = new javax.swing.JTextField();
        txtECG = new javax.swing.JTextField();
        txtExercise = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txt3 = new javax.swing.JLabel();
        txt4 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jlable6 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txt5 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        bttnAnalyzeAge = new javax.swing.JButton();
        bttnAnalyzeSex = new javax.swing.JButton();
        bttnAnalyzeCPType = new javax.swing.JButton();
        bttnAnalyzeBP = new javax.swing.JButton();
        bttnAnalyzeCL = new javax.swing.JButton();
        bttnAnalyzeRBS = new javax.swing.JButton();
        bttnAnalyzeECG = new javax.swing.JButton();
        bttnAnalyzeExercise = new javax.swing.JButton();
        bttnAnalyzeMHR = new javax.swing.JButton();
        bttnAnalyzeOP = new javax.swing.JButton();
        bttnAnalyzeTS = new javax.swing.JButton();
        jCheckBoxVisuaizeMHR = new javax.swing.JCheckBox();
        jCheckBoxVisuaizeOP = new javax.swing.JCheckBox();
        jCheckBoxVisuaizeTS = new javax.swing.JCheckBox();
        lblDrawGraphs = new javax.swing.JLabel();
        jCheckBoxVisuaizeAge = new javax.swing.JCheckBox();
        jCheckBoxVisuaizeSex = new javax.swing.JCheckBox();
        jCheckBoxVisuaizeCPType = new javax.swing.JCheckBox();
        jCheckBoxVisuaizeBP = new javax.swing.JCheckBox();
        jCheckBoxVisuaizeCL = new javax.swing.JCheckBox();
        jCheckBoxVisuaizeRBS = new javax.swing.JCheckBox();
        jCheckBoxVisuaizeECG = new javax.swing.JCheckBox();
        jCheckBoxVisuaizeExercise = new javax.swing.JCheckBox();
        jchkboxSelectVisualizeAll = new javax.swing.JCheckBox();
        chkExercise = new javax.swing.JCheckBox();
        chkMHR = new javax.swing.JCheckBox();
        chkOP = new javax.swing.JCheckBox();
        chkTS = new javax.swing.JCheckBox();
        chkAge = new javax.swing.JCheckBox();
        chkSex = new javax.swing.JCheckBox();
        chkCP = new javax.swing.JCheckBox();
        chkBP = new javax.swing.JCheckBox();
        chkCL = new javax.swing.JCheckBox();
        chkFBS = new javax.swing.JCheckBox();
        chkECG = new javax.swing.JCheckBox();
        lblAnalyzeInputs = new javax.swing.JLabel();
        jchkboxSelectAnalyseAll = new javax.swing.JCheckBox();
        jLabel7 = new javax.swing.JLabel();
        bttnResetAll = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtDataSetInput = new javax.swing.JTextArea();
        bttnLoadDataSet = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        bttnResetDataSet = new javax.swing.JButton();
        bttnLoadAndAnalyze = new javax.swing.JButton();
        lblNoOfAnalizedPatients = new javax.swing.JLabel();
        lblNoOfAnalizedPatientsCount = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTableOutputValues = new javax.swing.JTable();
        bttnVisualizeResults = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        txtDiagnosisResult = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtPredictedResult = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jCheckBoxVisuaizeAllOutputs = new javax.swing.JCheckBox();
        bttnAnalyzeBySelectedInputs = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuItemVisualizeRules = new javax.swing.JMenuItem();
        jMenuExit = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItemPreset1 = new javax.swing.JMenuItem();
        jMenuItemPreset2 = new javax.swing.JMenuItem();
        jMenuItemPreset3 = new javax.swing.JMenuItem();
        jMenuItemPreset4 = new javax.swing.JMenuItem();
        jMenuItemPreset5 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Cardiac Diagnoser - by Fuzzy Systems");
        setResizable(false);

        bttnExit.setText("Exit");
        bttnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnExitActionPerformed(evt);
            }
        });

        txtPrintInputandFuzzyRules.setEditable(false);
        txtPrintInputandFuzzyRules.setColumns(20);
        txtPrintInputandFuzzyRules.setRows(5);
        jScrollPane2.setViewportView(txtPrintInputandFuzzyRules);

        jTabbedPaneInputOutput.addTab("Fuzzy Inputs and Rules", jScrollPane2);

        txtPrintOutput.setEditable(false);
        txtPrintOutput.setColumns(20);
        txtPrintOutput.setRows(5);
        jScrollPane1.setViewportView(txtPrintOutput);

        jTabbedPaneInputOutput.addTab("Output", jScrollPane1);

        jPanelInputs.setBorder(javax.swing.BorderFactory.createTitledBorder("Inputs"));

        txtOldPeak.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtOldPeakKeyTyped(evt);
            }
        });

        txtThalliumScan.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtThalliumScanKeyTyped(evt);
            }
        });

        txtAge.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtAgeKeyTyped(evt);
            }
        });

        txtSex.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSexKeyTyped(evt);
            }
        });

        txtChestPainType.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtChestPainTypeKeyTyped(evt);
            }
        });

        txtBloodPressure.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtBloodPressureKeyTyped(evt);
            }
        });

        txtCholesterolLevel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCholesterolLevelKeyTyped(evt);
            }
        });

        txtRestingBloodSugar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRestingBloodSugarActionPerformed(evt);
            }
        });
        txtRestingBloodSugar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtRestingBloodSugarKeyTyped(evt);
            }
        });

        txtMaximumHeartRate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMaximumHeartRateKeyTyped(evt);
            }
        });

        txtECG.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtECGKeyTyped(evt);
            }
        });

        txtExercise.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtExerciseKeyTyped(evt);
            }
        });

        jLabel11.setText("{(0-210)(beats/min)}");

        txt3.setText("{(0=Normal)(1=ST-T abnormal)(2=Hypertrophy)} ");

        txt4.setText("{(0-300) mm Hg}");

        jLabel12.setText("{(0-No)(1-Yes)}");

        jlable6.setText("{(0-550) mg/dl}");

        jLabel13.setText("{(0-6)}");

        txt5.setText("{(0-120) Years}");

        jLabel14.setText("{(3-Normal) (6-Fixed Defect) (7-Reversible Defect)}");

        jLabel15.setText("{(0-Negative)(1-Positive)}");

        jLabel4.setText("{(0-Female)(1-Male)}");

        jLabel5.setText("{(1=typical angina)(2=atypical angina)(3=non-anginal pain)(4=asymptomatic)} ");

        bttnAnalyzeAge.setText("Age :");
        bttnAnalyzeAge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnAnalyzeAgeActionPerformed(evt);
            }
        });

        bttnAnalyzeSex.setText("Sex :");
        bttnAnalyzeSex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnAnalyzeSexActionPerformed(evt);
            }
        });

        bttnAnalyzeCPType.setText("Chest Pain Type :");
        bttnAnalyzeCPType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnAnalyzeCPTypeActionPerformed(evt);
            }
        });

        bttnAnalyzeBP.setText("Blood Pressure :");
        bttnAnalyzeBP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnAnalyzeBPActionPerformed(evt);
            }
        });

        bttnAnalyzeCL.setText("Cholesterol Level :");
        bttnAnalyzeCL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnAnalyzeCLActionPerformed(evt);
            }
        });

        bttnAnalyzeRBS.setText("FBS (Diabetes) :");
        bttnAnalyzeRBS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnAnalyzeRBSActionPerformed(evt);
            }
        });

        bttnAnalyzeECG.setText("ECG :");
        bttnAnalyzeECG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnAnalyzeECGActionPerformed(evt);
            }
        });

        bttnAnalyzeExercise.setText("Used digitalis during exercise :");
        bttnAnalyzeExercise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnAnalyzeExerciseActionPerformed(evt);
            }
        });

        bttnAnalyzeMHR.setText("Maximum Heart Rate achieved :");
        bttnAnalyzeMHR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnAnalyzeMHRActionPerformed(evt);
            }
        });

        bttnAnalyzeOP.setText("Old Peak :");
        bttnAnalyzeOP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnAnalyzeOPActionPerformed(evt);
            }
        });

        bttnAnalyzeTS.setText("Thallium Scan :");
        bttnAnalyzeTS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnAnalyzeTSActionPerformed(evt);
            }
        });

        lblDrawGraphs.setText("  VG");

        jCheckBoxVisuaizeRBS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxVisuaizeRBSActionPerformed(evt);
            }
        });

        jchkboxSelectVisualizeAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jchkboxSelectVisualizeAllActionPerformed(evt);
            }
        });

        chkExercise.setSelected(true);
        chkExercise.setFocusable(false);
        chkExercise.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        chkExercise.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        chkMHR.setSelected(true);
        chkMHR.setFocusable(false);
        chkMHR.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        chkMHR.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        chkOP.setSelected(true);
        chkOP.setFocusable(false);
        chkOP.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        chkOP.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        chkTS.setSelected(true);
        chkTS.setFocusable(false);
        chkTS.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        chkTS.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        chkAge.setSelected(true);
        chkAge.setFocusable(false);
        chkAge.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        chkAge.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        chkSex.setSelected(true);
        chkSex.setFocusable(false);
        chkSex.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        chkSex.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        chkCP.setSelected(true);
        chkCP.setFocusable(false);
        chkCP.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        chkCP.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        chkBP.setSelected(true);
        chkBP.setFocusable(false);
        chkBP.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        chkBP.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        chkCL.setSelected(true);
        chkCL.setFocusable(false);
        chkCL.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        chkCL.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        chkFBS.setSelected(true);
        chkFBS.setFocusable(false);
        chkFBS.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        chkFBS.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        chkECG.setSelected(true);
        chkECG.setFocusable(false);
        chkECG.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        chkECG.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        lblAnalyzeInputs.setText("AU");

        jchkboxSelectAnalyseAll.setSelected(true);
        jchkboxSelectAnalyseAll.setFocusable(false);
        jchkboxSelectAnalyseAll.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jchkboxSelectAnalyseAll.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jchkboxSelectAnalyseAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jchkboxSelectAnalyseAllActionPerformed(evt);
            }
        });

        jLabel7.setText("AU: {Analyze Using} VG :{Visualize Graphs}");

        javax.swing.GroupLayout jPanelInputsLayout = new javax.swing.GroupLayout(jPanelInputs);
        jPanelInputs.setLayout(jPanelInputsLayout);
        jPanelInputsLayout.setHorizontalGroup(
            jPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelInputsLayout.createSequentialGroup()
                .addGroup(jPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelInputsLayout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addGroup(jPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelInputsLayout.createSequentialGroup()
                                .addComponent(chkTS)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jCheckBoxVisuaizeTS))
                            .addComponent(jchkboxSelectAnalyseAll, javax.swing.GroupLayout.Alignment.LEADING)))
                    .addGroup(jPanelInputsLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(chkOP)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBoxVisuaizeOP))
                    .addGroup(jPanelInputsLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(chkMHR)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBoxVisuaizeMHR))
                    .addGroup(jPanelInputsLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(chkExercise)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBoxVisuaizeExercise))
                    .addGroup(jPanelInputsLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(chkECG)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBoxVisuaizeECG))
                    .addGroup(jPanelInputsLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(chkFBS)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBoxVisuaizeRBS))
                    .addGroup(jPanelInputsLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(chkCL)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBoxVisuaizeCL))
                    .addGroup(jPanelInputsLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(chkBP)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBoxVisuaizeBP))
                    .addGroup(jPanelInputsLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(chkCP)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBoxVisuaizeCPType))
                    .addGroup(jPanelInputsLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(chkSex)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBoxVisuaizeSex))
                    .addGroup(jPanelInputsLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(chkAge)
                        .addGap(8, 8, 8)
                        .addGroup(jPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jchkboxSelectVisualizeAll)
                            .addComponent(jCheckBoxVisuaizeAge))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 18, Short.MAX_VALUE)
                .addGroup(jPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(bttnAnalyzeAge, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bttnAnalyzeTS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bttnAnalyzeOP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bttnAnalyzeMHR, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                    .addComponent(bttnAnalyzeECG, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bttnAnalyzeCL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bttnAnalyzeBP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bttnAnalyzeCPType, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bttnAnalyzeSex, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bttnAnalyzeRBS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bttnAnalyzeExercise, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelInputsLayout.createSequentialGroup()
                        .addComponent(txtThalliumScan, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel14))
                    .addGroup(jPanelInputsLayout.createSequentialGroup()
                        .addComponent(txtOldPeak, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel13))
                    .addGroup(jPanelInputsLayout.createSequentialGroup()
                        .addComponent(txtMaximumHeartRate, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel11))
                    .addGroup(jPanelInputsLayout.createSequentialGroup()
                        .addGroup(jPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtExercise, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtAge)
                                .addComponent(txtSex)
                                .addComponent(txtChestPainType, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelInputsLayout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(jLabel12))
                            .addGroup(jPanelInputsLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel4)
                                    .addComponent(txt5)))))
                    .addGroup(jPanelInputsLayout.createSequentialGroup()
                        .addComponent(txtECG, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(txt3))
                    .addGroup(jPanelInputsLayout.createSequentialGroup()
                        .addComponent(txtRestingBloodSugar, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(jLabel15))
                    .addGroup(jPanelInputsLayout.createSequentialGroup()
                        .addComponent(txtCholesterolLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jlable6))
                    .addGroup(jPanelInputsLayout.createSequentialGroup()
                        .addComponent(txtBloodPressure, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt4))))
            .addGroup(jPanelInputsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblAnalyzeInputs)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblDrawGraphs, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jLabel7)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelInputsLayout.setVerticalGroup(
            jPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelInputsLayout.createSequentialGroup()
                .addGroup(jPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanelInputsLayout.createSequentialGroup()
                        .addGroup(jPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblDrawGraphs)
                            .addComponent(lblAnalyzeInputs)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jchkboxSelectVisualizeAll))
                    .addComponent(jchkboxSelectAnalyseAll))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(chkAge)
                    .addGroup(jPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txt5)
                        .addComponent(bttnAnalyzeAge))
                    .addComponent(jCheckBoxVisuaizeAge))
                .addGroup(jPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelInputsLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSex, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(bttnAnalyzeSex)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelInputsLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(jPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBoxVisuaizeSex, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(chkSex, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtChestPainType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5)
                        .addComponent(bttnAnalyzeCPType, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jCheckBoxVisuaizeCPType, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(chkCP, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtBloodPressure, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txt4)
                        .addComponent(bttnAnalyzeBP))
                    .addComponent(jCheckBoxVisuaizeBP, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(chkBP, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(5, 5, 5)
                .addGroup(jPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtCholesterolLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jlable6)
                        .addComponent(bttnAnalyzeCL))
                    .addComponent(jCheckBoxVisuaizeCL, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(chkCL, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jCheckBoxVisuaizeRBS)
                        .addComponent(chkFBS))
                    .addGroup(jPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtRestingBloodSugar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel15)
                        .addComponent(bttnAnalyzeRBS)))
                .addGap(7, 7, 7)
                .addGroup(jPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtECG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txt3)
                        .addComponent(bttnAnalyzeECG))
                    .addComponent(jCheckBoxVisuaizeECG)
                    .addComponent(chkECG))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtExercise, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel12)
                        .addComponent(bttnAnalyzeExercise))
                    .addComponent(jCheckBoxVisuaizeExercise, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(chkExercise, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jCheckBoxVisuaizeMHR)
                        .addComponent(chkMHR))
                    .addGroup(jPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtMaximumHeartRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel11)
                        .addComponent(bttnAnalyzeMHR)))
                .addGap(5, 5, 5)
                .addGroup(jPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(chkOP)
                    .addComponent(jCheckBoxVisuaizeOP)
                    .addGroup(jPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtOldPeak, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel13)
                        .addComponent(bttnAnalyzeOP)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtThalliumScan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel14)
                        .addComponent(bttnAnalyzeTS))
                    .addComponent(jCheckBoxVisuaizeTS, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(chkTS, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(2, 2, 2))
        );

        bttnResetAll.setText("Reset All");
        bttnResetAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnResetAllActionPerformed(evt);
            }
        });

        txtDataSetInput.setColumns(20);
        txtDataSetInput.setRows(5);
        jScrollPane3.setViewportView(txtDataSetInput);

        bttnLoadDataSet.setText("Load Data Set");
        bttnLoadDataSet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnLoadDataSetActionPerformed(evt);
            }
        });

        jLabel6.setText("Data Set Input:");

        bttnResetDataSet.setText("Reset Data Set");
        bttnResetDataSet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnResetDataSetActionPerformed(evt);
            }
        });

        bttnLoadAndAnalyze.setText("Load & Analyze");
        bttnLoadAndAnalyze.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnLoadAndAnalyzeActionPerformed(evt);
            }
        });

        lblNoOfAnalizedPatients.setText("No. of Analized Patients : ");

        lblNoOfAnalizedPatientsCount.setText("0");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Results"));

        jTableOutputValues.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Actual", "Predicted"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(jTableOutputValues);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );

        bttnVisualizeResults.setText("Visualize Results");
        bttnVisualizeResults.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnVisualizeResultsActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Outputs"));

        txtDiagnosisResult.setEditable(false);
        txtDiagnosisResult.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDiagnosisResultKeyTyped(evt);
            }
        });

        jLabel2.setText("Diagnosis Result :");

        jLabel3.setText("Predicted Result :");

        txtPredictedResult.setEditable(false);

        jLabel1.setText("{(0) (Healthy) (1-4) (Presence of heart disease)}");

        bttnAnalyzeBySelectedInputs.setText("Analyse Using Selected Inputs");
        bttnAnalyzeBySelectedInputs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnAnalyzeBySelectedInputsByAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jCheckBoxVisuaizeAllOutputs)
                .addGap(26, 26, 26)
                .addComponent(bttnAnalyzeBySelectedInputs, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtDiagnosisResult)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1))
                    .addComponent(txtPredictedResult, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBoxVisuaizeAllOutputs)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtPredictedResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtDiagnosisResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(bttnAnalyzeBySelectedInputs)))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        jMenuFile.setText("File");

        jMenuItemVisualizeRules.setText("Visualize All Rules");
        jMenuItemVisualizeRules.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemVisualizeRulesActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemVisualizeRules);

        jMenuExit.setText("Exit");
        jMenuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuExitActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuExit);

        jMenuBar1.add(jMenuFile);

        jMenu1.setText("Presets");

        jMenuItemPreset1.setText("Preset 1");
        jMenuItemPreset1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemPreset1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemPreset1);

        jMenuItemPreset2.setText("Preset 2");
        jMenuItemPreset2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemPreset2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemPreset2);

        jMenuItemPreset3.setText("Preset 3");
        jMenuItemPreset3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemPreset3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemPreset3);

        jMenuItemPreset4.setText("Preset 4");
        jMenuItemPreset4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemPreset4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemPreset4);

        jMenuItemPreset5.setText("Preset 5 ");
        jMenuItemPreset5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemPreset5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemPreset5);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Help");

        jMenuItem1.setText("About");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(bttnLoadAndAnalyze, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(bttnLoadDataSet, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(bttnResetDataSet, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(bttnResetAll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(bttnExit)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblNoOfAnalizedPatients)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblNoOfAnalizedPatientsCount))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jPanelInputs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(0, 2, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(bttnVisualizeResults, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jTabbedPaneInputOutput, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(68, 68, 68)
                        .addComponent(bttnVisualizeResults))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(lblNoOfAnalizedPatients)
                            .addComponent(lblNoOfAnalizedPatientsCount))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(bttnLoadAndAnalyze)
                                    .addComponent(bttnResetDataSet))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(bttnResetAll)
                                    .addComponent(bttnExit)
                                    .addComponent(bttnLoadDataSet)))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanelInputs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPaneInputOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void bttnAnalyzeBySelectedInputsByAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnAnalyzeBySelectedInputsByAllActionPerformed
//    1.1Generate fcl file
    FclFileGenerator fclGenerator = new FclFileGenerator();
    fclGenerator.generateFCLFile(chkAge, chkSex, chkCP, chkBP, chkCL, chkFBS, chkECG, chkExercise, chkMHR, chkOP, chkTS);
    
    //1.2Set the fcl file path    
    String fbName = "customDiagnoser";
    jTabbedPaneInputOutput.setSelectedIndex(1);
    try{
//        1.3Validate inputs
        Validator validator = new Validator();
        if(!(validator.validateAge(txtAge) || 
            validator.validateBloodPreassure(txtBloodPressure) || 
            validator.validateCholesterolLevel(txtCholesterolLevel) || 
            validator.validateHeartRate(txtMaximumHeartRate))){ 
//        1.4Load Function block
        FIS fis = FIS.load("customDiagnoser.fcl", true);   
        FunctionBlock functionBlock = fis.getFunctionBlock(fbName);
          
            
    // Set inputs        
    if(chkAge.isSelected()){
       functionBlock.setVariable("Age", Double.parseDouble(txtAge.getText()));        
    }
    if(chkSex.isSelected()){
        functionBlock.setVariable("Sex", Double.parseDouble(txtSex.getText()));       
    }
    if(chkCP.isSelected()){
        functionBlock.setVariable("ChestPainType", Double.parseDouble(txtChestPainType.getText()));       
    }
    if(chkBP.isSelected()){
        functionBlock.setVariable("BloodPressure", Double.parseDouble(txtBloodPressure.getText()));      
    }
    if(chkCL.isSelected()){
        functionBlock.setVariable("Cholesterol", Double.parseDouble(txtCholesterolLevel.getText()));     
    }
    if(chkFBS.isSelected()){
        functionBlock.setVariable("RestingBloodSugar", Double.parseDouble(txtRestingBloodSugar.getText()));    
    }
    if(chkECG.isSelected()){
        functionBlock.setVariable("ECG", Double.parseDouble(txtECG.getText()));      
    }
    if(chkExercise.isSelected()){
        functionBlock.setVariable("Exercise", Double.parseDouble(txtExercise.getText()));     
    }
    if(chkMHR.isSelected()){
       functionBlock.setVariable("MaximumHeartRate", Double.parseDouble(txtMaximumHeartRate.getText()));      
    }
    if(chkOP.isSelected()){
        functionBlock.setVariable("OldPeak", Double.parseDouble(txtOldPeak.getText()));      
    }
    if(chkTS.isSelected()){
        functionBlock.setVariable("ThalliumScan", Double.parseDouble(txtThalliumScan.getText()));      
    }               
//   2.1.Fiuzzyfy the inputs > Fuzzy Inference > DeFuzzyfy the output to a Crisp output 
    // Evaluate / Inference
        functionBlock.evaluate();    

            FuzzifierDefuzzifier fuzzifierDefuzzifier = new FuzzifierDefuzzifier();
            //   2.2.Print the Fuzzy Rules in text areas   
            txtPrintInputandFuzzyRules.setText(functionBlock.toString()); 
            //   2.3.Print the Fuzzy Outputs in text areas       
            txtPredictedResult.setText(Double.toString(functionBlock.getVariable("Condition").getValue())); 
            txtPrintOutput.setText(functionBlock.getVariable("Condition").toString());          
            //   2.4.Visuualize the inputs and outputs in graphs           
            if(jCheckBoxVisuaizeAllOutputs.isSelected()){
            fuzzifierDefuzzifier.drawInputGraphs(functionBlock); 
            fuzzifierDefuzzifier.drawOutputGraphs(functionBlock);
            }
        }
    }catch(Exception e){
        JOptionPane.showMessageDialog(null, "You have made a mistake here. Please do the correction/s. \n\n Hint :"+e, "Error found", 2);
    }
    }//GEN-LAST:event_bttnAnalyzeBySelectedInputsByAllActionPerformed

    private void txtRestingBloodSugarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRestingBloodSugarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtRestingBloodSugarActionPerformed

    private void bttnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnExitActionPerformed
        System.exit(0);     
    }//GEN-LAST:event_bttnExitActionPerformed

    private void bttnAnalyzeAgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnAnalyzeAgeActionPerformed
        //Set the fcl file path
        String fbName = "diagnoserAge";
        jTabbedPaneInputOutput.setSelectedIndex(1);
        try{
            Validator validator = new Validator();
            if(!validator.validateAge(txtAge)){
                //     1.1 Create an object of patient class
                PatientDetails patientDetails = new PatientDetails();
                //     1.2Set patient details to patientDetails object        
                patientDetails.setAge(Double.parseDouble(txtAge.getText()));

                //   2.1.Fiuzzyfy the inputs > Fuzzy Inference > DeFuzzyfy the output to a Crisp output 
                FuzzifierDefuzzifier fuzzifierDefuzzifier = new FuzzifierDefuzzifier();
                FunctionBlock functionBlock = fuzzifierDefuzzifier.runAlgorithmForAge(fuzzifierDefuzzifier.getFunctionBlock(fbName),patientDetails);
                //   2.2.Print the Fuzzy Rules in text areas   
                txtPrintInputandFuzzyRules.setText(functionBlock.toString()); 
                //   2.3.Print the Fuzzy Outputs in text areas       
                txtPredictedResult.setText(Double.toString(functionBlock.getVariable("Condition").getValue())); 
                txtPrintOutput.setText(functionBlock.getVariable("Condition").toString());          
                //   2.4.Visuualize the inputs and outputs in graphs           
                if(jCheckBoxVisuaizeAge.isSelected()){
                fuzzifierDefuzzifier.drawInputGraphs(functionBlock); 
                fuzzifierDefuzzifier.drawOutputGraphs(functionBlock);
                }
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, "You have made a mistake here. Please do the correction/s. \n\n Hint :"+e, "Error found", 2);
        }
    
    }//GEN-LAST:event_bttnAnalyzeAgeActionPerformed

    private void bttnAnalyzeSexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnAnalyzeSexActionPerformed
    //Set the fcl file path
    String fbName = "diagnoserSex";
    jTabbedPaneInputOutput.setSelectedIndex(1);
    try{
        //     1.1 Create an object of patient class
        PatientDetails patientDetails = new PatientDetails();
        //     1.2Set patient details to patientDetails object        
        patientDetails.setSex(Double.parseDouble(txtSex.getText()));

        //   2.1.Fiuzzyfy the inputs > Fuzzy Inference > DeFuzzyfy the output to a Crisp output 
        FuzzifierDefuzzifier fuzzifierDefuzzifier = new FuzzifierDefuzzifier();
        FunctionBlock functionBlock = fuzzifierDefuzzifier.runAlgorithmForSex(fuzzifierDefuzzifier.getFunctionBlock(fbName),patientDetails);
        //   2.2.Print the Fuzzy Rules in text areas   
        txtPrintInputandFuzzyRules.setText(functionBlock.toString()); 
        //   2.3.Print the Fuzzy Outputs in text areas       
        txtPredictedResult.setText(Double.toString(functionBlock.getVariable("Condition").getValue())); 
        txtPrintOutput.setText(functionBlock.getVariable("Condition").toString());          
        //   2.4.Visuualize the inputs and outputs in graphs           
        if(jCheckBoxVisuaizeSex.isSelected()){
        fuzzifierDefuzzifier.drawInputGraphs(functionBlock); 
        fuzzifierDefuzzifier.drawOutputGraphs(functionBlock);
        }
    }catch(Exception e){
        JOptionPane.showMessageDialog(null, "You have made a mistake here. Please do the correction/s. \n\n Hint :"+e, "Error found", 2);
    }
    }//GEN-LAST:event_bttnAnalyzeSexActionPerformed

    private void bttnAnalyzeCPTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnAnalyzeCPTypeActionPerformed
    //Set the fcl file path
    String fbName = "diagnoserCPType";
    jTabbedPaneInputOutput.setSelectedIndex(1);
    try{
        //     1.1 Create an object of patient class
        PatientDetails patientDetails = new PatientDetails();
        //     1.2Set patient details to patientDetails object        
        patientDetails.setChestPainType(Double.parseDouble(txtChestPainType.getText()));

        //   2.1.Fiuzzyfy the inputs > Fuzzy Inference > DeFuzzyfy the output to a Crisp output 
        FuzzifierDefuzzifier fuzzifierDefuzzifier = new FuzzifierDefuzzifier();
        FunctionBlock functionBlock = fuzzifierDefuzzifier.runAlgorithmForCPType(fuzzifierDefuzzifier.getFunctionBlock(fbName),patientDetails);
        //   2.2.Print the Fuzzy Rules in text areas   
        txtPrintInputandFuzzyRules.setText(functionBlock.toString()); 
        //   2.3.Print the Fuzzy Outputs in text areas       
        txtPredictedResult.setText(Double.toString(functionBlock.getVariable("Condition").getValue())); 
        txtPrintOutput.setText(functionBlock.getVariable("Condition").toString());          
        //   2.4.Visuualize the inputs and outputs in graphs           
        if(jCheckBoxVisuaizeCPType.isSelected()){
        fuzzifierDefuzzifier.drawInputGraphs(functionBlock); 
        fuzzifierDefuzzifier.drawOutputGraphs(functionBlock);
        }
    }catch(Exception e){
        JOptionPane.showMessageDialog(null, "You have made a mistake here. Please do the correction/s. \n\n Hint :"+e, "Error found", 2);
    }
    }//GEN-LAST:event_bttnAnalyzeCPTypeActionPerformed

    private void bttnAnalyzeBPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnAnalyzeBPActionPerformed
    //Set the fcl file path
    String fbName = "diagnoserBP";
    jTabbedPaneInputOutput.setSelectedIndex(1);
    try{
            Validator validator = new Validator();
            if(!validator.validateBloodPreassure(txtBloodPressure)){        
            //     1.1 Create an object of patient class
            PatientDetails patientDetails = new PatientDetails();
            //     1.2Set patient details to patientDetails object        
            patientDetails.setBloodPressure(Double.parseDouble(txtBloodPressure.getText()));

            //   2.1.Fiuzzyfy the inputs > Fuzzy Inference > DeFuzzyfy the output to a Crisp output 
            FuzzifierDefuzzifier fuzzifierDefuzzifier = new FuzzifierDefuzzifier();
            FunctionBlock functionBlock = fuzzifierDefuzzifier.runAlgorithmForBP(fuzzifierDefuzzifier.getFunctionBlock(fbName),patientDetails);
            //   2.2.Print the Fuzzy Rules in text areas   
            txtPrintInputandFuzzyRules.setText(functionBlock.toString()); 
            //   2.3.Print the Fuzzy Outputs in text areas       
            txtPredictedResult.setText(Double.toString(functionBlock.getVariable("Condition").getValue())); 
            txtPrintOutput.setText(functionBlock.getVariable("Condition").toString());          
            //   2.4.Visuualize the inputs and outputs in graphs           
            if(jCheckBoxVisuaizeBP.isSelected()){
            fuzzifierDefuzzifier.drawInputGraphs(functionBlock); 
            fuzzifierDefuzzifier.drawOutputGraphs(functionBlock);
            }
        }
    }catch(Exception e){
        JOptionPane.showMessageDialog(null, "You have made a mistake here. Please do the correction/s. \n\n Hint :"+e, "Error found", 2);
    }
    }//GEN-LAST:event_bttnAnalyzeBPActionPerformed

    private void bttnAnalyzeCLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnAnalyzeCLActionPerformed
    //Set the fcl file path
    String fbName = "diagnoserCL";
    jTabbedPaneInputOutput.setSelectedIndex(1);
    try{
        Validator validator = new Validator();
        if(!validator.validateCholesterolLevel(txtCholesterolLevel)){           
            //     1.1 Create an object of patient class
            PatientDetails patientDetails = new PatientDetails();
            //     1.2Set patient details to patientDetails object        
            patientDetails.setCholesterol(Double.parseDouble(txtCholesterolLevel.getText()));
            //   2.1.Fiuzzyfy the inputs > Fuzzy Inference > DeFuzzyfy the output to a Crisp output 
            FuzzifierDefuzzifier fuzzifierDefuzzifier = new FuzzifierDefuzzifier();
            FunctionBlock functionBlock = fuzzifierDefuzzifier.runAlgorithmForCL(fuzzifierDefuzzifier.getFunctionBlock(fbName),patientDetails);
            //   2.2.Print the Fuzzy Rules in text areas   
            txtPrintInputandFuzzyRules.setText(functionBlock.toString()); 
            //   2.3.Print the Fuzzy Outputs in text areas       
            txtPredictedResult.setText(Double.toString(functionBlock.getVariable("Condition").getValue())); 
            txtPrintOutput.setText(functionBlock.getVariable("Condition").toString());          
            //   2.4.Visuualize the inputs and outputs in graphs           
            if(jCheckBoxVisuaizeCL.isSelected()){
            fuzzifierDefuzzifier.drawInputGraphs(functionBlock); 
            fuzzifierDefuzzifier.drawOutputGraphs(functionBlock);
            }
        }
    }catch(Exception e){
        JOptionPane.showMessageDialog(null, "You have made a mistake here. Please do the correction/s. \n\n Hint :"+e, "Error found", 2);
    }
    }//GEN-LAST:event_bttnAnalyzeCLActionPerformed

    private void bttnAnalyzeRBSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnAnalyzeRBSActionPerformed
    //Set the fcl file path
    String fbName = "diagnoserRBS";
    jTabbedPaneInputOutput.setSelectedIndex(1);
    try{
        //     1.1 Create an object of patient class
        PatientDetails patientDetails = new PatientDetails();
        //     1.2Set patient details to patientDetails object        
        patientDetails.setRestingBloodSugar(Double.parseDouble(txtRestingBloodSugar.getText()));
        //   2.1.Fiuzzyfy the inputs > Fuzzy Inference > DeFuzzyfy the output to a Crisp output 
        FuzzifierDefuzzifier fuzzifierDefuzzifier = new FuzzifierDefuzzifier();
        FunctionBlock functionBlock = fuzzifierDefuzzifier.runAlgorithmForRBS(fuzzifierDefuzzifier.getFunctionBlock(fbName),patientDetails);
        //   2.2.Print the Fuzzy Rules in text areas   
        txtPrintInputandFuzzyRules.setText(functionBlock.toString()); 
        //   2.3.Print the Fuzzy Outputs in text areas       
        txtPredictedResult.setText(Double.toString(functionBlock.getVariable("Condition").getValue())); 
        txtPrintOutput.setText(functionBlock.getVariable("Condition").toString());          
        //   2.4.Visuualize the inputs and outputs in graphs           
        if(jCheckBoxVisuaizeRBS.isSelected()){
        fuzzifierDefuzzifier.drawInputGraphs(functionBlock); 
        fuzzifierDefuzzifier.drawOutputGraphs(functionBlock);
        }
    }catch(Exception e){
        JOptionPane.showMessageDialog(null, "You have made a mistake here. Please do the correction/s. \n\n Hint :"+e, "Error found", 2);
    }
    }//GEN-LAST:event_bttnAnalyzeRBSActionPerformed

    private void bttnAnalyzeECGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnAnalyzeECGActionPerformed
    //Set the fcl file path
    String fbName = "diagnoserECG";
    jTabbedPaneInputOutput.setSelectedIndex(1);
    try{
        //     1.1 Create an object of patient class
        PatientDetails patientDetails = new PatientDetails();
        //     1.2Set patient details to patientDetails object        
        patientDetails.setECG(Double.parseDouble(txtECG.getText()));
        //   2.1.Fiuzzyfy the inputs > Fuzzy Inference > DeFuzzyfy the output to a Crisp output 
        FuzzifierDefuzzifier fuzzifierDefuzzifier = new FuzzifierDefuzzifier();
        FunctionBlock functionBlock = fuzzifierDefuzzifier.runAlgorithmForECG(fuzzifierDefuzzifier.getFunctionBlock(fbName),patientDetails);
        //   2.2.Print the Fuzzy Rules in text areas   
        txtPrintInputandFuzzyRules.setText(functionBlock.toString()); 
        //   2.3.Print the Fuzzy Outputs in text areas       
        txtPredictedResult.setText(Double.toString(functionBlock.getVariable("Condition").getValue())); 
        txtPrintOutput.setText(functionBlock.getVariable("Condition").toString());          
        //   2.4.Visuualize the inputs and outputs in graphs           
        if(jCheckBoxVisuaizeECG.isSelected()){
        fuzzifierDefuzzifier.drawInputGraphs(functionBlock); 
        fuzzifierDefuzzifier.drawOutputGraphs(functionBlock);
        }
    }catch(Exception e){
        JOptionPane.showMessageDialog(null, "You have made a mistake here. Please do the correction/s. \n\n Hint :"+e, "Error found", 2);
    }
    }//GEN-LAST:event_bttnAnalyzeECGActionPerformed

    private void bttnAnalyzeExerciseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnAnalyzeExerciseActionPerformed
    //Set the fcl file path
    String fbName = "diagnoserExercise";
    jTabbedPaneInputOutput.setSelectedIndex(1);
    try{
        //     1.1 Create an object of patient class
        PatientDetails patientDetails = new PatientDetails();
        //     1.2Set patient details to patientDetails object        
        patientDetails.setExercise(Double.parseDouble(txtExercise.getText()));
        //   2.1.Fiuzzyfy the inputs > Fuzzy Inference > DeFuzzyfy the output to a Crisp output 
        FuzzifierDefuzzifier fuzzifierDefuzzifier = new FuzzifierDefuzzifier();
        FunctionBlock functionBlock = fuzzifierDefuzzifier.runAlgorithmForExercise(fuzzifierDefuzzifier.getFunctionBlock(fbName),patientDetails);
        //   2.2.Print the Fuzzy Rules in text areas   
        txtPrintInputandFuzzyRules.setText(functionBlock.toString()); 
        //   2.3.Print the Fuzzy Outputs in text areas       
        txtPredictedResult.setText(Double.toString(functionBlock.getVariable("Condition").getValue())); 
        txtPrintOutput.setText(functionBlock.getVariable("Condition").toString());          
        //   2.4.Visuualize the inputs and outputs in graphs           
        if(jCheckBoxVisuaizeExercise.isSelected()){
        fuzzifierDefuzzifier.drawInputGraphs(functionBlock); 
        fuzzifierDefuzzifier.drawOutputGraphs(functionBlock);
        }
    }catch(Exception e){
        JOptionPane.showMessageDialog(null, "You have made a mistake here. Please do the correction/s. \n\n Hint :"+e, "Error found", 2);
    }
    }//GEN-LAST:event_bttnAnalyzeExerciseActionPerformed

    private void bttnAnalyzeMHRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnAnalyzeMHRActionPerformed
    //Set the fcl file path
    String fbName = "diagnoserMHR";
    jTabbedPaneInputOutput.setSelectedIndex(1);
    try{
        Validator validator = new Validator();
        if(!validator.validateHeartRate(txtMaximumHeartRate)){             
            //     1.1 Create an object of patient class
            PatientDetails patientDetails = new PatientDetails();
            //     1.2Set patient details to patientDetails object        
            patientDetails.setMaximumHeartRate(Double.parseDouble(txtMaximumHeartRate.getText()));
            //   2.1.Fiuzzyfy the inputs > Fuzzy Inference > DeFuzzyfy the output to a Crisp output 
            FuzzifierDefuzzifier fuzzifierDefuzzifier = new FuzzifierDefuzzifier();
            FunctionBlock functionBlock = fuzzifierDefuzzifier.runAlgorithmForMHR(fuzzifierDefuzzifier.getFunctionBlock(fbName),patientDetails);
            //   2.2.Print the Fuzzy Rules in text areas   
            txtPrintInputandFuzzyRules.setText(functionBlock.toString()); 
            //   2.3.Print the Fuzzy Outputs in text areas       
            txtPredictedResult.setText(Double.toString(functionBlock.getVariable("Condition").getValue())); 
            txtPrintOutput.setText(functionBlock.getVariable("Condition").toString());          
            //   2.4.Visuualize the inputs and outputs in graphs           
            if(jCheckBoxVisuaizeMHR.isSelected()){
            fuzzifierDefuzzifier.drawInputGraphs(functionBlock); 
            fuzzifierDefuzzifier.drawOutputGraphs(functionBlock);
            }
        }
    }catch(Exception e){
        JOptionPane.showMessageDialog(null, "You have made a mistake here. Please do the correction/s. \n\n Hint :"+e, "Error found", 2);
    }
    }//GEN-LAST:event_bttnAnalyzeMHRActionPerformed

    private void bttnAnalyzeOPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnAnalyzeOPActionPerformed
    //Set the fcl file path
    String fbName = "diagnoserOP";
    jTabbedPaneInputOutput.setSelectedIndex(1);
    try{
        //     1.1 Create an object of patient class
        PatientDetails patientDetails = new PatientDetails();
        //     1.2Set patient details to patientDetails object        
        patientDetails.setOldPeak(Double.parseDouble(txtOldPeak.getText()));
        //   2.1.Fiuzzyfy the inputs > Fuzzy Inference > DeFuzzyfy the output to a Crisp output 
        FuzzifierDefuzzifier fuzzifierDefuzzifier = new FuzzifierDefuzzifier();
        FunctionBlock functionBlock = fuzzifierDefuzzifier.runAlgorithmForOP(fuzzifierDefuzzifier.getFunctionBlock(fbName),patientDetails);
        //   2.2.Print the Fuzzy Rules in text areas   
        txtPrintInputandFuzzyRules.setText(functionBlock.toString()); 
        //   2.3.Print the Fuzzy Outputs in text areas       
        txtPredictedResult.setText(Double.toString(functionBlock.getVariable("Condition").getValue())); 
        txtPrintOutput.setText(functionBlock.getVariable("Condition").toString());          
        //   2.4.Visuualize the inputs and outputs in graphs           
        if(jCheckBoxVisuaizeOP.isSelected()){
        fuzzifierDefuzzifier.drawInputGraphs(functionBlock); 
        fuzzifierDefuzzifier.drawOutputGraphs(functionBlock);
        }
    }catch(Exception e){
        JOptionPane.showMessageDialog(null, "You have made a mistake here. Please do the correction/s. \n\n Hint :"+e, "Error found", 2);
    }
    }//GEN-LAST:event_bttnAnalyzeOPActionPerformed

    private void bttnAnalyzeTSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnAnalyzeTSActionPerformed
    //Set the fcl file path
    String fbName = "diagnoserTS";
    jTabbedPaneInputOutput.setSelectedIndex(1);
    try{
        //     1.1 Create an object of patient class
        PatientDetails patientDetails = new PatientDetails();
        //     1.2Set patient details to patientDetails object        
        patientDetails.setThalliumScan(Double.parseDouble(txtThalliumScan.getText()));
        //   2.1.Fiuzzyfy the inputs > Fuzzy Inference > DeFuzzyfy the output to a Crisp output 
        FuzzifierDefuzzifier fuzzifierDefuzzifier = new FuzzifierDefuzzifier();
        FunctionBlock functionBlock = fuzzifierDefuzzifier.runAlgorithmForTS(fuzzifierDefuzzifier.getFunctionBlock(fbName),patientDetails);
        //   2.2.Print the Fuzzy Rules in text areas   
        txtPrintInputandFuzzyRules.setText(functionBlock.toString()); 
        //   2.3.Print the Fuzzy Outputs in text areas       
        txtPredictedResult.setText(Double.toString(functionBlock.getVariable("Condition").getValue())); 
        txtPrintOutput.setText(functionBlock.getVariable("Condition").toString());          
        //   2.4.Visuualize the inputs and outputs in graphs           
        if(jCheckBoxVisuaizeTS.isSelected()){
        fuzzifierDefuzzifier.drawInputGraphs(functionBlock); 
        fuzzifierDefuzzifier.drawOutputGraphs(functionBlock);
        }
    }catch(Exception e){
        JOptionPane.showMessageDialog(null, "You have made a mistake here. Please do the correction/s. \n\n Hint :"+e, "Error found", 2);
    }
    }//GEN-LAST:event_bttnAnalyzeTSActionPerformed

    private void jMenuItemVisualizeRulesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemVisualizeRulesActionPerformed
    //        Set the fcl file path
    String fbName = "diagnoser";
    //    Create a function block
    FuzzifierDefuzzifier fuzzifierDefuzzifier = new FuzzifierDefuzzifier();
    FunctionBlock functionBlock = fuzzifierDefuzzifier.getFunctionBlock(fbName);
    
    //    Select the Inputs and Fuzzy rules tab
    jTabbedPaneInputOutput.setSelectedIndex(0);    
    //   2.2.Print the Fuzzy Rules in text areas   
    txtPrintInputandFuzzyRules.setText(functionBlock.toString());
    //    Draw input graphs
    fuzzifierDefuzzifier.drawInputGraphs(functionBlock);
    
    }//GEN-LAST:event_jMenuItemVisualizeRulesActionPerformed

    private void jMenuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuExitActionPerformed

    private void txtAgeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAgeKeyTyped
        //Only allow numbers
        char c=evt.getKeyChar();
        if(!(Character.isDigit(c)||c== KeyEvent.VK_BACK_SPACE || c== KeyEvent.VK_DELETE)){
            evt.consume();
            getToolkit().beep();           
        }else if(txtAge.getText().length()==3){
            evt.consume();
            getToolkit().beep(); 
        }
    }//GEN-LAST:event_txtAgeKeyTyped

    private void txtSexKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSexKeyTyped
        char c=evt.getKeyChar();
        if(!(c== KeyEvent.VK_BACK_SPACE || c== KeyEvent.VK_DELETE || c==KeyEvent.VK_0 || c==KeyEvent.VK_1 )){
            evt.consume();
            getToolkit().beep();    
        }else if(txtSex.getText().length()==1){
            evt.consume();
            getToolkit().beep();               
        }
    }//GEN-LAST:event_txtSexKeyTyped

    private void txtRestingBloodSugarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRestingBloodSugarKeyTyped
        char c=evt.getKeyChar();
        if(!(c== KeyEvent.VK_BACK_SPACE || c== KeyEvent.VK_DELETE || c==KeyEvent.VK_0 || c==KeyEvent.VK_1 )){
            evt.consume();
            getToolkit().beep();    
        }else if(txtRestingBloodSugar.getText().length()==1){
            evt.consume();
            getToolkit().beep();               
        }
    }//GEN-LAST:event_txtRestingBloodSugarKeyTyped

    private void txtExerciseKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtExerciseKeyTyped
        char c=evt.getKeyChar();
        if(!(c== KeyEvent.VK_BACK_SPACE || c== KeyEvent.VK_DELETE || c==KeyEvent.VK_0 || c==KeyEvent.VK_1 )){
            evt.consume();
            getToolkit().beep();    
        }else if(txtExercise.getText().length()==1){
            evt.consume();
            getToolkit().beep();               
        }
    }//GEN-LAST:event_txtExerciseKeyTyped

    private void txtChestPainTypeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtChestPainTypeKeyTyped
        char c=evt.getKeyChar();
        if(!(c== KeyEvent.VK_BACK_SPACE || c== KeyEvent.VK_DELETE || c==KeyEvent.VK_1 || c==KeyEvent.VK_2 || c==KeyEvent.VK_3 || c==KeyEvent.VK_4)){
            evt.consume();
            getToolkit().beep();    
        }else if(txtChestPainType.getText().length()==1){
            evt.consume();
            getToolkit().beep();               
        }
    }//GEN-LAST:event_txtChestPainTypeKeyTyped

    private void txtECGKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtECGKeyTyped
        char c=evt.getKeyChar();
        if(!(c== KeyEvent.VK_BACK_SPACE || c== KeyEvent.VK_DELETE || c==KeyEvent.VK_0 || c==KeyEvent.VK_1 || c==KeyEvent.VK_2)){
            evt.consume();
            getToolkit().beep();    
        }else if(txtECG.getText().length()==1){
            evt.consume();
            getToolkit().beep();               
        }
    }//GEN-LAST:event_txtECGKeyTyped

    private void txtThalliumScanKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtThalliumScanKeyTyped
        char c=evt.getKeyChar();
        if(!(c== KeyEvent.VK_BACK_SPACE || c== KeyEvent.VK_DELETE || c==KeyEvent.VK_3 || c==KeyEvent.VK_6 || c==KeyEvent.VK_7)){
            evt.consume();
            getToolkit().beep();    
        }else if(txtThalliumScan.getText().length()==1){
            evt.consume();
            getToolkit().beep();               
        }
    }//GEN-LAST:event_txtThalliumScanKeyTyped

    private void txtOldPeakKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtOldPeakKeyTyped
        char c=evt.getKeyChar();
        if(!(c== KeyEvent.VK_BACK_SPACE || c== KeyEvent.VK_DELETE || c==KeyEvent.VK_0 || c==KeyEvent.VK_1 || c==KeyEvent.VK_2 || c== KeyEvent.VK_3 || c==KeyEvent.VK_4 || c==KeyEvent.VK_5 || c==KeyEvent.VK_6)){
            evt.consume();
            getToolkit().beep();    
        }else if(txtOldPeak.getText().length()==1){
            evt.consume();
            getToolkit().beep();               
        }
    }//GEN-LAST:event_txtOldPeakKeyTyped

    private void txtBloodPressureKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBloodPressureKeyTyped
        //Only allow numbers
        char c=evt.getKeyChar();
        if(!(Character.isDigit(c)||c== KeyEvent.VK_BACK_SPACE || c== KeyEvent.VK_DELETE)){
            evt.consume();
            getToolkit().beep();           
        }else if(txtBloodPressure.getText().length()==3){
            evt.consume();
            getToolkit().beep(); 
        }
    }//GEN-LAST:event_txtBloodPressureKeyTyped

    private void txtCholesterolLevelKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCholesterolLevelKeyTyped
        //Only allow numbers
        char c=evt.getKeyChar();
        if(!(Character.isDigit(c)||c== KeyEvent.VK_BACK_SPACE || c== KeyEvent.VK_DELETE)){
            evt.consume();
            getToolkit().beep();           
        }else if(txtCholesterolLevel.getText().length()==3){
            evt.consume();
            getToolkit().beep(); 
        }
    }//GEN-LAST:event_txtCholesterolLevelKeyTyped

    private void txtMaximumHeartRateKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMaximumHeartRateKeyTyped
        //Only allow numbers
        char c=evt.getKeyChar();
        if(!(Character.isDigit(c)||c== KeyEvent.VK_BACK_SPACE || c== KeyEvent.VK_DELETE)){
            evt.consume();
            getToolkit().beep();           
        }else if(txtMaximumHeartRate.getText().length()==3){
            evt.consume();
            getToolkit().beep(); 
        }
    }//GEN-LAST:event_txtMaximumHeartRateKeyTyped

    private void bttnResetAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnResetAllActionPerformed
//        Reset jText Fields
        txtDataSetInput.setText("");        
        
        txtAge.setText("");
        txtSex.setText("");    
        txtChestPainType.setText(""); 
        txtBloodPressure.setText(""); 
        txtCholesterolLevel.setText(""); 
        
        txtRestingBloodSugar.setText(""); 
        txtECG.setText(""); 
        txtExercise.setText(""); 
        txtMaximumHeartRate.setText(""); 
        txtOldPeak.setText(""); 
        
        txtThalliumScan.setText(""); 
        txtDiagnosisResult.setText("");
        txtPredictedResult.setText(""); 
               
        txtPrintInputandFuzzyRules.setText(""); 
        txtPrintOutput.setText("");

//      Reset all jtext boxes
        resetAllJTextBoxes();
        
//        Reset Lables
        lblNoOfAnalizedPatientsCount.setText("0");
        
//           Reset jtable
    DefaultTableModel model = (DefaultTableModel) jTableOutputValues.getModel();
    model.getDataVector().clear();  
    model.fireTableDataChanged();
    jTableOutputValues.setModel(model);
    }//GEN-LAST:event_bttnResetAllActionPerformed

    private void bttnLoadDataSetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnLoadDataSetActionPerformed
        try{
            if(!"".equals(txtDataSetInput.getText())){
            //Splits the data from dataset and insert into to a String array
            String str = txtDataSetInput.getText();
            String[] splited = str.split("\\s+");                

//            Load values into text fields
            loadTextValuesFromSplittedArray(splited);
            
            }else{
                JOptionPane.showMessageDialog(null, "Dataset field is empty. You can paste the dataset or  manually enter the values.","Dataset Input", 2);
                txtDataSetInput.grabFocus();
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, "Dataset is invalid or incomplete. Please double check for the accuracy of the dataset and try again", "Invalid dataset", 2);
            txtDataSetInput.grabFocus();
        }
    }//GEN-LAST:event_bttnLoadDataSetActionPerformed

    private void txtDiagnosisResultKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDiagnosisResultKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDiagnosisResultKeyTyped

    private void bttnResetDataSetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnResetDataSetActionPerformed
//        Reset jText Fields
        txtDataSetInput.setText("");
        txtDataSetInput.grabFocus();
        
//        Reset Lables
        lblNoOfAnalizedPatientsCount.setText("0");       
    }//GEN-LAST:event_bttnResetDataSetActionPerformed

    private void bttnLoadAndAnalyzeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnLoadAndAnalyzeActionPerformed
    if(!"".equals(txtDataSetInput.getText())){        
        try{
        //Splits the data from dataset and insert into to a String array        
        String str = txtDataSetInput.getText();
        String[] splited = str.split("\\s+");
        txtDataSetInput.setText(returnValuesWOBracketsAndCommas(splited));
        
        //Checkes for number of patients and if more than on patient in dataset
        if(splited.length > 151){       
        //System.out.println("1"); // Reduces the confusion in statement
            
            //Increase the 1st analyzed patients count
            int count = Integer.parseInt(lblNoOfAnalizedPatientsCount.getText());
            count = count +1;
            lblNoOfAnalizedPatientsCount.setText(String.valueOf(count));
            //Load and Analyze
            bttnLoadDataSet.doClick();
            bttnAnalyzeBySelectedInputs.doClick();     
            //Update output table
            updateOutputsTable(txtDiagnosisResult.getText(), txtPredictedResult.getText());
            
            while(splited.length > 151){
            //System.out.println("2");    // Reduces the confusion in statement
                
                //Increase the patients count from 2nd analized patient        
                int countInWhile = Integer.parseInt(lblNoOfAnalizedPatientsCount.getText());
                countInWhile = countInWhile +1;
                lblNoOfAnalizedPatientsCount.setText(String.valueOf(countInWhile));
                
            //Deletes the data belonging to first patient in the queue
            splited = Arrays.copyOfRange(splited, 76, splited.length); 
            //Load the data of the next patient in the queue
            txtDataSetInput.setText(returnValuesWOBracketsAndCommas(splited));
            //Load and Analyze            
            bttnLoadDataSet.doClick();        
            bttnAnalyzeBySelectedInputs.doClick(); 
            //Update output table
            updateOutputsTable(txtDiagnosisResult.getText(), txtPredictedResult.getText());
            
            //Clears the datasetInput textField
            txtDataSetInput.setText("");            
            }
            JOptionPane.showMessageDialog(null, "Analizing completed for "+lblNoOfAnalizedPatientsCount.getText()+" patient/s "
                    + "\nOnly the input data of the patient no.("+lblNoOfAnalizedPatientsCount.getText()+") is visible for the user");            
        }else{
            //Load the data of the patient in the queue            
            txtDataSetInput.setText(returnValuesWOBracketsAndCommas(splited));
            //Load and Analyze                      
            bttnLoadDataSet.doClick();        
            bttnAnalyzeBySelectedInputs.doClick();    
            //Update output table
            updateOutputsTable(txtDiagnosisResult.getText(), txtPredictedResult.getText());
            
            //Sets the count as one for the analyzed patient                  
            int count = Integer.parseInt(lblNoOfAnalizedPatientsCount.getText());
            count = count +1;
            lblNoOfAnalizedPatientsCount.setText(String.valueOf(count));
            //Clears the datasetInput textField
            txtDataSetInput.setText("");
            JOptionPane.showMessageDialog(null, "Analizing completed for "+lblNoOfAnalizedPatientsCount.getText()+" patient/s");                           
            
                }        
        }catch(Exception e){
                JOptionPane.showMessageDialog(null, "Dataset is invalid or incomplete. Please double check for the accuracy of the dataset and try again", "Invalid dataset", 2);
                txtDataSetInput.grabFocus();         
        }
    
    }else{
        JOptionPane.showMessageDialog(null, "Dataset field is empty. You can paste the dataset or  manually enter the values.","Dataset Input", 2);
        txtDataSetInput.grabFocus();
        }    
    }//GEN-LAST:event_bttnLoadAndAnalyzeActionPerformed

    private void bttnVisualizeResultsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnVisualizeResultsActionPerformed
        GraphicAnalyzer graphicAnalyzer = new GraphicAnalyzer();
        graphicAnalyzer.drawXYLineChart(getOutputTablesArray());
//        System.out.println(Arrays.toString(getOutputTablesArray()));
    }//GEN-LAST:event_bttnVisualizeResultsActionPerformed

    private void jchkboxSelectAnalyseAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jchkboxSelectAnalyseAllActionPerformed
        if(jchkboxSelectAnalyseAll.isSelected()){
        chkAge.setSelected(true);
        chkSex.setSelected(true);
        chkCP.setSelected(true);
        chkBP.setSelected(true);
        chkCL.setSelected(true);
        chkFBS.setSelected(true);
        chkECG.setSelected(true);
        chkExercise.setSelected(true);
        chkMHR.setSelected(true);
        chkOP.setSelected(true);         
        chkTS.setSelected(true);            
        }else{
        chkAge.setSelected(false);
        chkSex.setSelected(false);
        chkCP.setSelected(false);
        chkBP.setSelected(false);
        chkCL.setSelected(false);
        chkFBS.setSelected(false);
        chkECG.setSelected(false);
        chkExercise.setSelected(false);
        chkMHR.setSelected(false);
        chkOP.setSelected(false);         
        chkTS.setSelected(false);            
        }
    }//GEN-LAST:event_jchkboxSelectAnalyseAllActionPerformed

    private void jchkboxSelectVisualizeAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jchkboxSelectVisualizeAllActionPerformed
        if(jchkboxSelectVisualizeAll.isSelected()){
        jCheckBoxVisuaizeAge.setSelected(true);
        jCheckBoxVisuaizeSex.setSelected(true);
        jCheckBoxVisuaizeCPType.setSelected(true);
        jCheckBoxVisuaizeBP.setSelected(true);
        jCheckBoxVisuaizeCL.setSelected(true);
        
        jCheckBoxVisuaizeRBS.setSelected(true);
        jCheckBoxVisuaizeECG.setSelected(true);
        jCheckBoxVisuaizeExercise.setSelected(true);
        jCheckBoxVisuaizeMHR.setSelected(true);
        jCheckBoxVisuaizeOP.setSelected(true);
        
        jCheckBoxVisuaizeTS.setSelected(true);
        jCheckBoxVisuaizeAllOutputs.setSelected(true);            
        }else{
        jCheckBoxVisuaizeAge.setSelected(false);
        jCheckBoxVisuaizeSex.setSelected(false);
        jCheckBoxVisuaizeCPType.setSelected(false);
        jCheckBoxVisuaizeBP.setSelected(false);
        jCheckBoxVisuaizeCL.setSelected(false);
        
        jCheckBoxVisuaizeRBS.setSelected(false);
        jCheckBoxVisuaizeECG.setSelected(false);
        jCheckBoxVisuaizeExercise.setSelected(false);
        jCheckBoxVisuaizeMHR.setSelected(false);
        jCheckBoxVisuaizeOP.setSelected(false);
        
        jCheckBoxVisuaizeTS.setSelected(false);
        jCheckBoxVisuaizeAllOutputs.setSelected(false);            
        }
    }//GEN-LAST:event_jchkboxSelectVisualizeAllActionPerformed

    private void jCheckBoxVisuaizeRBSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxVisuaizeRBSActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxVisuaizeRBSActionPerformed

    private void jMenuItemPreset1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemPreset1ActionPerformed
        resetAllJTextBoxes();
        
        //Set Preset        
        chkAge.setSelected(false);
        chkSex.setSelected(false);
        chkCP.setSelected(true);
        chkBP.setSelected(false);
        chkCL.setSelected(false);
        chkFBS.setSelected(false);
        chkECG.setSelected(false);
        chkExercise.setSelected(true);
        chkMHR.setSelected(false);
        chkOP.setSelected(false);         
        chkTS.setSelected(false);
    }//GEN-LAST:event_jMenuItemPreset1ActionPerformed

    private void jMenuItemPreset2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemPreset2ActionPerformed
        resetAllJTextBoxes();
        
        //Set Preset        
        chkAge.setSelected(true);
        chkSex.setSelected(false);
        chkCP.setSelected(true);
        chkBP.setSelected(false);
        chkCL.setSelected(true);
        chkFBS.setSelected(false);
        chkECG.setSelected(true);
        chkExercise.setSelected(false);
        chkMHR.setSelected(false);
        chkOP.setSelected(true);         
        chkTS.setSelected(false);
    }//GEN-LAST:event_jMenuItemPreset2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        JOptionPane.showMessageDialog(null, "This application was developed as an Assignment by the following Student \nName : Yasas De Silva \nStudent No : st 20087326 \nSubject : Intelligent Systems (BCO 6004) \nInstitute : ICBT Sri Lanka \n University : Cardiff Metropolitan University, UK", "About Cardiac Diagnosor 1.0", 1);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItemPreset3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemPreset3ActionPerformed
        resetAllJTextBoxes();
        
        //Set Preset        
        chkAge.setSelected(false);
        chkSex.setSelected(false);
        chkCP.setSelected(true);
        chkBP.setSelected(false);
        chkCL.setSelected(false);
        chkFBS.setSelected(false);
        chkECG.setSelected(false);
        chkExercise.setSelected(true);
        chkMHR.setSelected(false);
        chkOP.setSelected(false);         
        chkTS.setSelected(false);
    }//GEN-LAST:event_jMenuItemPreset3ActionPerformed

    private void jMenuItemPreset4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemPreset4ActionPerformed
        resetAllJTextBoxes();
        
        //Set Preset        
        chkAge.setSelected(false);
        chkSex.setSelected(false);
        chkCP.setSelected(true);
        chkBP.setSelected(true);
        chkCL.setSelected(false);
        chkFBS.setSelected(false);
        chkECG.setSelected(false);
        chkExercise.setSelected(true);
        chkMHR.setSelected(false);
        chkOP.setSelected(false);         
        chkTS.setSelected(false);
    }//GEN-LAST:event_jMenuItemPreset4ActionPerformed

    private void jMenuItemPreset5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemPreset5ActionPerformed
        resetAllJTextBoxes();
        
        //Set Preset        
        chkAge.setSelected(false);
        chkSex.setSelected(true);
        chkCP.setSelected(false);
        chkBP.setSelected(false);
        chkCL.setSelected(true);
        chkFBS.setSelected(false);
        chkECG.setSelected(false);
        chkExercise.setSelected(true);
        chkMHR.setSelected(false);
        chkOP.setSelected(true);         
        chkTS.setSelected(false);
    }//GEN-LAST:event_jMenuItemPreset5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainScreen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bttnAnalyzeAge;
    private javax.swing.JButton bttnAnalyzeBP;
    private javax.swing.JButton bttnAnalyzeBySelectedInputs;
    private javax.swing.JButton bttnAnalyzeCL;
    private javax.swing.JButton bttnAnalyzeCPType;
    private javax.swing.JButton bttnAnalyzeECG;
    private javax.swing.JButton bttnAnalyzeExercise;
    private javax.swing.JButton bttnAnalyzeMHR;
    private javax.swing.JButton bttnAnalyzeOP;
    private javax.swing.JButton bttnAnalyzeRBS;
    private javax.swing.JButton bttnAnalyzeSex;
    private javax.swing.JButton bttnAnalyzeTS;
    private javax.swing.JButton bttnExit;
    private javax.swing.JButton bttnLoadAndAnalyze;
    private javax.swing.JButton bttnLoadDataSet;
    private javax.swing.JButton bttnResetAll;
    private javax.swing.JButton bttnResetDataSet;
    private javax.swing.JButton bttnVisualizeResults;
    private javax.swing.JCheckBox chkAge;
    private javax.swing.JCheckBox chkBP;
    private javax.swing.JCheckBox chkCL;
    private javax.swing.JCheckBox chkCP;
    private javax.swing.JCheckBox chkECG;
    private javax.swing.JCheckBox chkExercise;
    private javax.swing.JCheckBox chkFBS;
    private javax.swing.JCheckBox chkMHR;
    private javax.swing.JCheckBox chkOP;
    private javax.swing.JCheckBox chkSex;
    private javax.swing.JCheckBox chkTS;
    private javax.swing.JCheckBox jCheckBoxVisuaizeAge;
    private javax.swing.JCheckBox jCheckBoxVisuaizeAllOutputs;
    private javax.swing.JCheckBox jCheckBoxVisuaizeBP;
    private javax.swing.JCheckBox jCheckBoxVisuaizeCL;
    private javax.swing.JCheckBox jCheckBoxVisuaizeCPType;
    private javax.swing.JCheckBox jCheckBoxVisuaizeECG;
    private javax.swing.JCheckBox jCheckBoxVisuaizeExercise;
    private javax.swing.JCheckBox jCheckBoxVisuaizeMHR;
    private javax.swing.JCheckBox jCheckBoxVisuaizeOP;
    private javax.swing.JCheckBox jCheckBoxVisuaizeRBS;
    private javax.swing.JCheckBox jCheckBoxVisuaizeSex;
    private javax.swing.JCheckBox jCheckBoxVisuaizeTS;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuExit;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItemPreset1;
    private javax.swing.JMenuItem jMenuItemPreset2;
    private javax.swing.JMenuItem jMenuItemPreset3;
    private javax.swing.JMenuItem jMenuItemPreset4;
    private javax.swing.JMenuItem jMenuItemPreset5;
    private javax.swing.JMenuItem jMenuItemVisualizeRules;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanelInputs;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPaneInputOutput;
    private javax.swing.JTable jTableOutputValues;
    private javax.swing.JCheckBox jchkboxSelectAnalyseAll;
    private javax.swing.JCheckBox jchkboxSelectVisualizeAll;
    private javax.swing.JLabel jlable6;
    private javax.swing.JLabel lblAnalyzeInputs;
    private javax.swing.JLabel lblDrawGraphs;
    private javax.swing.JLabel lblNoOfAnalizedPatients;
    private javax.swing.JLabel lblNoOfAnalizedPatientsCount;
    private javax.swing.JLabel txt3;
    private javax.swing.JLabel txt4;
    private javax.swing.JLabel txt5;
    private javax.swing.JTextField txtAge;
    private javax.swing.JTextField txtBloodPressure;
    private javax.swing.JTextField txtChestPainType;
    private javax.swing.JTextField txtCholesterolLevel;
    private javax.swing.JTextArea txtDataSetInput;
    private javax.swing.JTextField txtDiagnosisResult;
    private javax.swing.JTextField txtECG;
    private javax.swing.JTextField txtExercise;
    private javax.swing.JTextField txtMaximumHeartRate;
    private javax.swing.JTextField txtOldPeak;
    private javax.swing.JTextField txtPredictedResult;
    private javax.swing.JTextArea txtPrintInputandFuzzyRules;
    private javax.swing.JTextArea txtPrintOutput;
    private javax.swing.JTextField txtRestingBloodSugar;
    private javax.swing.JTextField txtSex;
    private javax.swing.JTextField txtThalliumScan;
    // End of variables declaration//GEN-END:variables

    public void loadTextValuesFromSplittedArray(String[] splited){
            //Call the realavant indexes from array and inserts them to relavant fields
            txtAge.setText(splited[2]);
            txtSex.setText(splited[3]);   
            txtChestPainType.setText(splited[8]);
            txtBloodPressure.setText(splited[9]);  
            txtCholesterolLevel.setText(splited[11]);
            txtRestingBloodSugar.setText(splited[15]);  
            txtECG.setText(splited[18]);
            txtExercise.setText(splited[37]);  
            txtMaximumHeartRate.setText(splited[31]);
            txtOldPeak.setText(splited[39]);  
            txtThalliumScan.setText(splited[50]); 
            txtDiagnosisResult.setText(splited[57]);
            txtPredictedResult.setText("");        
    }
        
    public String returnValuesWOBracketsAndCommas(String[] array){
            String formatedString = Arrays.toString(array)
            .replace(",", "")  //remove the commas
             .replace("[", "")  //remove the right bracket
            .replace("]", "")  //remove the left bracket
            .trim();           //remove trailing spaces from partially initialized arrays        
            
            return formatedString;
    }
    
    
    public void updateOutputsTable(String actualValue, String predictedValue){
    DefaultTableModel model = (DefaultTableModel) jTableOutputValues.getModel();
    model.addRow(new Object[]{actualValue, predictedValue});           
    }
    
    public String[] getOutputTablesArray(){
        //get the row count
        int rowCount = jTableOutputValues.getRowCount();
        String[] outputData=new String[rowCount];   
        //add the values of rows and columns to the array
        if(rowCount>0){
            for(int i=0 ; i<rowCount ; i++){
            outputData[i]=((String) jTableOutputValues.getModel().getValueAt(i,0))+" "+((String) jTableOutputValues.getModel().getValueAt(i,1));
            }            
        }        
        return outputData;
    }
       
    public void resetAllJTextBoxes(){
//        Reset Visualize Graphs jecheck Boxes
        jCheckBoxVisuaizeAge.setSelected(false);
        jCheckBoxVisuaizeSex.setSelected(false);
        jCheckBoxVisuaizeCPType.setSelected(false);
        jCheckBoxVisuaizeBP.setSelected(false);
        jCheckBoxVisuaizeCL.setSelected(false);
        
        jCheckBoxVisuaizeRBS.setSelected(false);
        jCheckBoxVisuaizeECG.setSelected(false);
        jCheckBoxVisuaizeExercise.setSelected(false);
        jCheckBoxVisuaizeMHR.setSelected(false);
        jCheckBoxVisuaizeOP.setSelected(false);
        
        jCheckBoxVisuaizeTS.setSelected(false);
        jCheckBoxVisuaizeAllOutputs.setSelected(false);
        
        jchkboxSelectVisualizeAll.setSelected(false);
        
//        Reset Analyze Using jecheck Boxes        
        chkAge.setSelected(false);
        chkSex.setSelected(false);
        chkCP.setSelected(false);
        chkBP.setSelected(false);
        chkCL.setSelected(false);
        chkFBS.setSelected(false);
        chkECG.setSelected(false);
        chkExercise.setSelected(false);
        chkMHR.setSelected(false);
        chkOP.setSelected(false);         
        chkTS.setSelected(false);
        
        jchkboxSelectAnalyseAll.setSelected(false);        
    }
}
